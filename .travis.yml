language: c

git:
  depth: 1000


# Install all main dependencies for Linux. Additional compilers may be installed
# as defined in the build matrix.
addons:
  apt:
    sources: &apt_sources
      - kalakris-cmake
    packages: &apt_packages
      - gfortran
      - cmake
      - libopenmpi-dev
      - openmpi-bin
      - binutils-dev
      - doxygen
      - help2man

# Install all required packages for OS X builds. The following solution was
# inspired by http://stackoverflow.com/a/20802381
before_install_tmpl: &before_install
  - brew update --quiet >& /dev/null
  - for pkg in gcc cmake openmpi argp-standalone help2man doxygen; do
      if brew list -1 | grep -q "^${pkg}\$"; then
        brew outdated $pkg || brew upgrade $pkg;
      else
        brew install $pkg;
      fi
    done


matrix:
  include:
    # Ubuntu Precise (12.04 LTS) GCC builds.
    - os: linux
      compiler: gcc-4.4
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.4
            - g++-4.4
            - gfortran-4.4
      before_script:
      - export CC=gcc-4.4; export CXX=g++-4.4; export FC=gfortran-4.4
    - os: linux
      compiler: gcc-4.5
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.5
            - g++-4.5
            - gfortran-4.5
      before_script:
      - export CC=gcc-4.5; export CXX=g++-4.5; export FC=gfortran-4.5
    - os: linux
      compiler: gcc-4.6
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.6
            - g++-4.6
            - gfortran-4.6
      before_script:
      - export CC=gcc-4.6; export CXX=g++-4.6; export FC=gfortran-4.6

    # Ubuntu Trusty (14.04 LTS) GCC builds.
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc-4.6-trusty
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.6
            - g++-4.6
            - gfortran-4.6
      before_script:
      - export CC=gcc-4.6; export CXX=g++-4.6; export FC=gfortran-4.6
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc-4.7
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.7
            - g++-4.7
            - gfortran-4.7
      before_script:
      - export CC=gcc-4.7; export CXX=g++-4.7; export FC=gfortran-4.7
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc-4.8
      before_script:
      - export CC=gcc-4.8; export CXX=g++-4.8; export FC=gfortran-4.8

    # Clang builds for Precise and Trusty.
    - os: linux
      compiler: clang-3.4
      sudo: false
      before_script:
        - export CC=clang; export CXX=clang++
    - os: linux
      dist: trusty
      sudo: false
      compiler: clang-3.5
      before_script:
        - export CC=clang; export CXX=clang++

    # OSX builds.
    - os: osx
      osx_image: xcode7.3.1
      compiler: clang
      before_install: *before_install
    - os: osx
      osx_image: xcode8
      compiler: clang
      before_install: *before_install
    - os: osx
      osx_image: xcode8.1
      compiler: clang
      before_install: *before_install
    - os: osx
      osx_image: xcode8.2
      compiler: clang
      before_install: *before_install
    - os: osx
      compiler: gcc-6
      before_install: *before_install
      before_script:
        - export CC=gcc-6; export CXX=g++-6

    # MPICH build.
    - os: osx
      compiler: clang
      before_install: *before_install
      before_script:
        - brew unlink openmpi
        - brew install mpich
      env:
        - MPICH

    # Build without Fortran.
    - os: linux
      dist: trusty
      compiler: gcc
      sudo: false
      before_script:
        - export CMAKE_EXTRA_FLAGS="-DENABLE_FORTRAN=off"
      env:
        - NO_FORTRAN

    # Check coding convention.
    - os: linux
      dist: trusty
      compiler: gcc
      sudo: false
      env:
        FORMAT
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty
          packages:
            - clang-format-3.8
      git:
        submodules: false
        depth: 9999999
      script:
        - git filter-branch --force --tree-filter '
            find . \( -name "*.c" -o -name "*.cpp" -o -name "*.h" \)
              -not -path "./externals/*"
              -exec clang-format-3.8 -style=file -fallback-style=none -i {} \; ;
            if test $(git diff | wc -l) -gt 0;
            then
                echo "";
                git --no-pager diff --color=always;
                exit 1;
            fi
          ' --tag-name-filter cat -- 7244fc1..HEAD
      after_success:




script:
  - mkdir travis && cd travis
  - if [ "$TRAVIS_OS_NAME" != "osx" ] && [[ "$CC" != clang* ]];
    then
      SANITIZE_FLAGS="-DSANITIZE_ADDRESS=On -DSANITIZE_UNDEFINED=On";
    else
      echo "Address Sanitizer is disabled for OSX and clang builds.";
    fi
  - if [[ "$CC" != clang* ]];
    then
      COVERAGE_FLAGS="-DENABLE_COVERAGE=On";
    else
      echo "Code coverage is disabled for clang.";
    fi
  - cmake .. -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE=Debug
      -DENABLE_TESTS=On -DBUILD_DOC_INTERNAL=On $SANITIZE_FLAGS $COVERAGE_FLAGS
      $CMAKE_EXTRA_FLAGS
    && make install
    && ctest --output-on-failure


after_success:
  - make -k gcov
  - bash <(curl -s https://codecov.io/bash) -X gcov
