# This file is part of P^nMPI.
#
# Copyright (c)
#  2008-2017 Lawrence Livermore National Laboratories, United States of America
#  2011-2017 ZIH, Technische Universitaet Dresden, Federal Republic of Germany
#  2013-2017 RWTH Aachen University, Federal Republic of Germany
#
#
# P^nMPI is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation version 2.1 dated February 1999.
#
# P^nMPI is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with P^nMPI; if not, write to the
#
#   Free Software Foundation, Inc.
#   51 Franklin St, Fifth Floor
#   Boston, MA 02110, USA
#
#
# Written by Martin Schulz, schulzm@llnl.gov.
#
# LLNL-CODE-402774

language: c

git:
  depth: 1000


# Install all main dependencies for Linux. Additional compilers may be installed
# as defined in the build matrix.
addons:
  apt:
    sources: &apt_sources
      - kalakris-cmake
    packages: &apt_packages
      - gfortran
      - cmake
      - libopenmpi-dev
      - openmpi-bin
      - binutils-dev
      - doxygen
      - help2man

# Install all required packages for OS X builds. The following solution was
# inspired by http://stackoverflow.com/a/20802381
before_install_tmpl: &before_install
  - travis_retry brew update --quiet >& /dev/null
  - for pkg in gcc cmake mpich argp-standalone help2man doxygen; do
      if brew list -1 | grep -q "^${pkg}\$"; then
        brew outdated $pkg || travis_retry brew upgrade $pkg;
      else
        travis_retry brew install $pkg;
      fi
    done
  - brew link --overwrite gcc


jobs:
  include:
    # Compiliance checks
    #
    # Check the compiliance of the code first. If the code doesn't follow the
    # coding standards, there is no sense in checking it, as the commit will be
    # rejected anyway.

    # Check coding convention.
    - stage: compiliance
      os: linux
      dist: trusty
      sudo: false
      env:
        FORMAT
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty
          packages:
            - clang-format-3.8
      git:
        submodules: false
        depth: 9999999
      before_script:
        - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        - git fetch
      script:
        - git filter-branch --force --tree-filter '
            find . \( -name "*.c" -o -name "*.cpp" -o -name "*.h" \)
              -not -path "./externals/*"
              -exec clang-format-3.8 -style=file -fallback-style=none -i {} \; ;
            if test $(git diff | wc -l) -gt 0;
            then
                echo "";
                git --no-pager diff --color=always;
                exit 1;
            fi
          ' --tag-name-filter cat origin/master~1..HEAD
      after_success:

    # Check license in all files.
    - os: linux
      env:
        LICENSE_HEADER
      addons:
        apt:
      git:
        submodules: false
        depth: 9999999
      before_script:
        - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        - git fetch
      script:
        - git filter-branch --force --tree-filter '
            num=$(wc -l extra/license/header.c | sed "s/[^0-9]*//g") ;
            find . \( -name "*.c" -o -name "*.cpp" -o -name "*.h"
                     -o -name "*.c.w" -o -name "*.h.w" -o -name "*.h.in" \)
              -exec sh -c "cat {}
                | head -n $num
                | git diff  --no-index -- extra/license/header.c -
              || (
                echo \"\";
                echo \"{} does not contain a valid license header.\";
                echo 1 > error
              )" \; ;

            num=$(wc -l extra/license/header.txt | sed "s/[^0-9]*//g") ;
            find . \( -name "*.txt" -o -name "*.conf" -o -name "*.yml"
                      -o -name "*.cmake" -o -name "*.cmake.in" \)
                ! -path "./cmakemodules/legacy/*"
                ! -path "./cmakemodules/Platform/*"
                ! -path "./cmakemodules/Toolchain/*"
                ! -path "./cmakemodules/FindBFD.cmake"
              -exec sh -c "cat {}
                | head -n $num
                | git diff  --no-index -- extra/license/header.txt -
              || (
                echo \"\";
                echo \"{} does not contain a valid license header.\";
                echo 1 > error
              )" \; ;
            find . \( -name "*.sh" \)
              -exec sh -c "cat {}
                | head -n $((num + 2)) | tail -n $num
                | git diff  --no-index -- extra/license/header.txt -
              || (
                echo \"\";
                echo \"{} does not contain a valid license header.\";
                echo 1 > error
              )" \; ;

              test \! -f error ;
          ' --tag-name-filter cat origin/master~1..HEAD
      after_success:


    # Regular builds for OpenMPI.
    #
    # Check PnMPI builds for numerous versions of Linux and osx / mac OS with
    # OpenMPI.

    # Ubuntu Precise (12.04 LTS) GCC builds.
    - stage: build OpenMPI
      os: linux
      compiler: gcc-4.4
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.4
            - g++-4.4
            - gfortran-4.4
      before_script:
      - export CC=gcc-4.4; export CXX=g++-4.4; export FC=gfortran-4.4
    - os: linux
      compiler: gcc-4.5
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.5
            - g++-4.5
            - gfortran-4.5
      before_script:
      - export CC=gcc-4.5; export CXX=g++-4.5; export FC=gfortran-4.5

    # Ubuntu Trusty (14.04 LTS) GCC builds.
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc-4.6
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.6
            - g++-4.6
            - gfortran-4.6
      before_script:
      - export CC=gcc-4.6; export CXX=g++-4.6; export FC=gfortran-4.6
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc-4.7
      addons:
        apt:
          sources: *apt_sources
          packages:
            - *apt_packages
            - gcc-4.7
            - g++-4.7
            - gfortran-4.7
      before_script:
      - export CC=gcc-4.7; export CXX=g++-4.7; export FC=gfortran-4.7
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc-4.8
      before_script:
      - export CC=gcc-4.8; export CXX=g++-4.8; export FC=gfortran-4.8

    # Clang builds for Precise and Trusty.
    - os: linux
      compiler: clang-3.4
      sudo: false
      before_script:
        - export CC=clang; export CXX=clang++
    - os: linux
      dist: trusty
      sudo: false
      compiler: clang-3.5
      before_script:
        - export CC=clang; export CXX=clang++

    # mac OS builds.
    #
    # Only XCode 8.2 will be tested, as the versions installed by homebrew
    # should be representive for all osx / mac OS versions. Detailed testing
    # will be done in the MPICH tests below.
    - os: osx
      osx_image: xcode8.2
      compiler: gcc
      before_install: *before_install
      before_script:
        - brew unlink mpich
        - travis_retry brew install openmpi
        - export CC=$(ls /usr/local/bin/gcc-[0-9]*);
          export CXX=$(ls /usr/local/bin/g++-[0-9]*)
        - export TMPDIR="/tmp/$TRAVIS_REPO_SLUG/$TRAVIS_JOB_NUMBER";
          mkdir -p $TMPDIR
    - os: osx
      osx_image: xcode8.2
      compiler: clang
      before_install: *before_install
      before_script:
        - brew unlink mpich
        - travis_retry brew install openmpi
        - export TMPDIR="/tmp/$TRAVIS_REPO_SLUG/$TRAVIS_JOB_NUMBER";
          mkdir -p $TMPDIR


    # Regular builds for MPICH.
    #
    # Check PnMPI builds for numerous versions of osx / mac OS with MPICH. As
    # MPICH is not available for Linux in Travis CI at the moment, this cannot
    # be tested right now.

    # OSX builds.
    - stage: build MPICH
      os: osx
      osx_image: xcode7.3.1
      compiler: clang
      before_install: *before_install
    - os: osx
      osx_image: xcode8
      compiler: clang
      before_install: *before_install
    - os: osx
      osx_image: xcode8.1
      compiler: clang
      before_install: *before_install
    - os: osx
      osx_image: xcode8.2
      compiler: clang
      before_install: *before_install


    # Specialized builds.
    #
    # Test some special configurations for PnMPI that influence the behaviour of
    # PnMPI and its testcases.

    # Build without Fortran.
    - stage: build specialized
      os: linux
      dist: trusty
      compiler: gcc
      sudo: false
      before_script:
        - export CMAKE_EXTRA_FLAGS="-DENABLE_FORTRAN=off"
      env:
        - NO_FORTRAN
    - os: osx
      compiler: clang
      before_install: *before_install
      before_script:
        - export CMAKE_EXTRA_FLAGS="-DENABLE_FORTRAN=off"
      env:
        - NO_FORTRAN

    # Build with adept-utils.
    - os: linux
      dist: trusty
      compiler: gcc
      sudo: false
      before_script:
        - export CMAKE_EXTRA_FLAGS="-DENABLE_ADEPT_UTILS=on"
      env:
        - WITH_ADEPT
    - os: osx
      compiler: clang
      before_install: *before_install
      before_script:
        - export CMAKE_EXTRA_FLAGS="-DENABLE_ADEPT_UTILS=on"
      env:
        - WITH_ADEPT

    # Build without PnMPIze.
    - os: linux
      dist: trusty
      compiler: gcc
      sudo: false
      before_script:
        - export CMAKE_EXTRA_FLAGS="-DENABLE_PNMPIZE=off"
      env:
        - WITHOUT_PNMPIZE
    - os: osx
      compiler: clang
      before_install: *before_install
      before_script:
        - export CMAKE_EXTRA_FLAGS="-DENABLE_PNMPIZE=off"
      env:
        - WITHOUT_PNMPIZE

    # Build with optimized configuration.
    - os: linux
      dist: trusty
      compiler: gcc
      sudo: false
      before_script:
        - export CMAKE_EXTRA_FLAGS="
            -DENABLE_DEBUG=OFF
            -DENABLE_THREAD_SAFETY=OFF
            -DCMAKE_BUILD_TYPE=Release
          "
      env:
        - OPTIMIZED

    # Build with Python 3 instead of the default Python 2 installed in Travis.
    - os: linux
      dist: trusty
      compiler: gcc
      sudo: false
      before_script:
        - export CMAKE_EXTRA_FLAGS="-DPYTHON_EXECUTABLE=$(which python3)"
      env:
        - PYTHON_3


    # Deploy checks
    #
    # Check release packaging. This will only package the current version,
    # unpack and change into this directory. The build will be done by the
    # default script below.
    - stage: deploy
      os: linux
      dist: trusty
      sudo: false
      compiler: gcc-4.8
      env:
        - DEPLOY
      before_script:
        - export CC=gcc-4.8; export CXX=g++-4.8; export FC=gfortran-4.8
        - export PWD_SAVE=$PWD
        - git clone https://github.com/Kentzo/git-archive-all.git
            ../git-archive-all
        - ln -s ../git-archive-all/git_archive_all.py
            ../git-archive-all/git-archive-all
        - export PATH="$PATH:$PWD/../git-archive-all"
        - mkdir package && cd package
        - ../extra/pack.sh
        - tar xfvz *.tar.gz
        - cd $(echo */)
      script:
        - ../../extra/build/ci.sh




script:
  - extra/build/ci.sh

after_success:
  - cd travis; make -k gcov
  - bash <(curl -s https://codecov.io/bash) -X gcov
